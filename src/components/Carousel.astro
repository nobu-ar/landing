---
// Importamos el framework de Preact para cliente
import { h } from 'preact';
import { useState } from 'preact/hooks';

// Rutas a las imágenes para el carrusel
const imagesData = [
  { 
    src: '/src/assets/images/spaces.jpg', 
    alt: 'Spaces', 
    title: 'Espacios',
    description: 'Ten ordenado tus servicios en un solo lugar'
  },
  { 
    src: '/src/assets/images/nobuPc.png', 
    alt: 'Nobu PC', 
    title: 'Panel de Control',
    description: 'Gestiona todo con confianza y eficiencia'
  }
];

// Definimos el componente client:load para que Astro lo hidrate en el cliente
---

<div class="carousel-container">
  <div id="preact-carousel"></div>
</div>

<script>
  import { render, h } from 'preact';
  import { useState, useEffect } from 'preact/hooks';
  
  // Definimos las imágenes del carrusel
  const imagesData = [
    { 
      src: '/src/assets/images/spaces.jpg', 
      alt: 'Spaces', 
      title: 'Espacios',
      description: 'Ten ordenado tus servicios en un solo lugar'
    },
    { 
      src: '/src/assets/images/nobuPc.png', 
      alt: 'Nobu PC', 
      title: 'Panel de Control',
      description: 'Gestiona todo con confianza y eficiencia'
    }
  ];

  // Componente Carrusel en Preact
  const Carousel = () => {
    const [activeIndex, setActiveIndex] = useState(0);
    
    // Cambiar a la siguiente imagen
    const handleNext = () => {
      setActiveIndex((prevIndex) => (prevIndex + 1) % imagesData.length);
    };
    
    // Cambiar a la imagen anterior
    const handlePrev = () => {
      setActiveIndex((prevIndex) => 
        prevIndex === 0 ? imagesData.length - 1 : prevIndex - 1
      );
    };
    
    // Función para calcular la posición y estilo de cada imagen
    const getImageStyle = (index) => {
      // Determinar la posición relativa al índice activo
      const position = (index - activeIndex + imagesData.length) % imagesData.length;
      
      // Definir estilos basados en la posición
      if (position === 0) { // Imagen frontal
        return {
          zIndex: 3,
          transform: 'scale(1) translateX(0)',
          opacity: 1
        };
      } else if (position === 1 || position === imagesData.length - 1) { // Imágenes laterales
        const xTranslate = position === 1 ? '50%' : '-50%';
        return {
          zIndex: 2,
          transform: `scale(0.85) translateX(${xTranslate})`,
          opacity: 0.7
        };
      } else { // Imágenes traseras
        return {
          zIndex: 1,
          transform: 'scale(0.7) translateX(0)',
          opacity: 0.5
        };
      }
    };
    
    return (
      <div class="carousel">
        <div class="images-container">
          {imagesData.map((image, index) => (
            <div 
              key={index}
              class="carousel-image"
              style={getImageStyle(index)}
            >
              <img src={image.src} alt={image.alt} />
              <div class="image-info">
                <h3>{image.title}</h3>
                <p>{image.description}</p>
              </div>
            </div>
          ))}
        </div>
        
        <div class="carousel-controls">
          <button class="carousel-button prev" onClick={handlePrev}>
            ← Anterior
          </button>
          <button class="carousel-button next" onClick={handleNext}>
            Siguiente →
          </button>
        </div>
      </div>
    );
  };
  
  // Renderizamos el componente en el contenedor
  render(<Carousel />, document.getElementById('preact-carousel'));
</script>

<style>
  .carousel-container {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 0;
    overflow: hidden;
  }
  
  :global(.carousel) {
    position: relative;
    width: 100%;
    height: 400px;
    margin: 0 auto;
  }
  
  :global(.images-container) {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  :global(.carousel-image) {
    position: absolute;
    width: 80%;
    height: 80%;
    transition: all 0.5s ease-in-out;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  }
  
  :global(.carousel-image img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  :global(.image-info) {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(11, 219, 144, 0.8);
    color: white;
    padding: 15px;
    text-align: center;
  }
  
  :global(.image-info h3) {
    margin: 0 0 5px;
    font-size: 1.2rem;
  }
  
  :global(.image-info p) {
    margin: 0;
    font-size: 0.9rem;
  }
  
  :global(.carousel-controls) {
    position: absolute;
    bottom: -40px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    gap: 20px;
  }
  
  :global(.carousel-button) {
    padding: 8px 16px;
    background-color: #0bd990;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 600;
    transition: background-color 0.3s;
  }
  
  :global(.carousel-button:hover) {
    background-color: #099a67;
  }
</style> 